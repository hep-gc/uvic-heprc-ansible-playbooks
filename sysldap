#!/bin/bash
# yarra: Reverse the BASH_ARGV array.
function yarra() {
    unset yarra
    declare -i j
    for (( i=${#BASH_ARGV[@]}; $i>-1; i-- )); do
        j=${#BASH_ARGV[@]}-$i
        yarra[$j]=${BASH_ARGV[$i]}
    done
    return
}

    PATH='/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin'

    case "$1" in

######### Set the sysldap environment and password.
        environment_set|es|set_environment|se|password_set|ps|set_password|sp)
            export sysldap_uri='ldaps://ldap1p.uvic.ca:636/'

            if [ "X$SUDO_USER" == 'X' ]; then
                if [ "X$2" == 'Xprint_note' ]; then
                    echo -e "\nNote: To avoid entering your NetLink ID for each 'sysldap' command, run the following: 'source sysldap password_set'.\n"
                fi

                echo -n "Enter your NetLink ID: "
                read -rs netlink_id
                export SUDO_USER=$netlink_id
                echo ''
            fi

            if [ "X$sysldap_pw" == 'X' ]; then
                if [ "X$2" == 'Xprint_note' ]; then
                    echo -e "\nNote: To avoid entering your NetLink password for each 'sysldap' command, run the following: 'source sysldap password_set'.\n"
                fi

                echo -n "Enter your NetLink password: "
                read -rs sysldap_pw
                export sysldap_pw=$sysldap_pw
                echo ''
            fi
        ;;

######### Add a group to physics. Set group ID number (>999).
        group_add|ga|add_group|ag)
            if [ "X$2" == 'X' ] || [ "X$3" == 'X' ]; then
                echo -e "\nSynopsis: sysldap [ group_add | ga ] <group_name> <group_number>\n"
                echo -e "\nNote: Group numbers must be greater than 999."
                exit
            fi

            source sysldap set_environment print_note

            declare -i gid=$3*1
#           if (( $gid < 1000 )); then
#               echo 'The group ID number must be greater than 999.'
#               exit
#           fi

            echo -e "dn: cn=$2,ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca\nobjectClass: top\nobjectClass: posixGroup\nobjectClass: groupOfNames\ncn: $2\ngidNumber: $gid" > /tmp/sysldap_group_add.ldif
            ldapmodify -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -a -f /tmp/sysldap_group_add.ldif
            rm -f /tmp/sysldap_group_add.ldif
        ;;

######### Delete a group from physics.
        group_delete|gd|delete_group|dg)
            if [ "X$2" == 'X' ]; then
                echo -e "\nSynopsis: sysldap [ group_delete | gd ] <group_name>\n"
                exit
            fi

            source sysldap set_environment print_note

            echo -e "dn: cn=$2,ou=HEP,ou=PHYS,ou=groups,dc=uvic,dc=ca\nchangetype: delete" > /tmp/sysldap_group_delete.ldif
            ldapmodify -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -f /tmp/sysldap_group_delete.ldif
            rm -f /tmp/sysldap_group_delete.ldif
        ;;

######### List physics groups with details.
        group_list|gl|list_groups|lg)
            source sysldap set_environment print_note

            ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b 'ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca' | awk '/^cn: / {group=$2} /^gidNumber: / {gid=$2} {if ($1=="" && group!="") {print group " " gid; group=""}}' | sort
        ;;

######### Modify a group. Set group ID number (>999).
        group_modify|gm|modify_group|mg)
            if [ "X$2" == 'X' ] || [ "X$3" == 'X' ]; then
                echo -e "\nSynopsis: sysldap [ group_modify | gm ] <group_name> <group_number>\n"
                echo -e "\nNote: Group numbers must be greater than 999."
                exit
            fi

            source sysldap set_environment print_note

            declare -i gid=$3*1
#           if (( $gid < 1000 )); then
#               echo 'The group ID number must be greater than 999.'
#               exit
#           fi

            echo -e "dn: cn=$2,ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca\nchangeType: modify\nreplace: gidNumber\ngidNumber: $gid\n-" > /tmp/sysldap_group_modify.ldif
            ldapmodify -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -f /tmp/sysldap_group_modify.ldif
            rm -f /tmp/sysldap_group_modify.ldif
        ;;

######### Add a user to physics, set default shell (bash), primary and secondary groups.
        user_add|ua|add_user|au)
            if [ "X$2" == 'X' ]; then
                echo -e "\nSynopsis: sysldap [ user_add | ua ]  <NetlinkID> {group1} {<group2} ... {groupN} {shell}\n"
                echo "Subcommand default: primary group='hep', no secondary groups, and shell='/bin/shells/bash'."
                exit
            fi

            source sysldap set_environment print_note

            # Set subcommand defaults.
            pg='hep'
            sg=''
            sh='/bin/shells/bash'

            # Override defaults with specified subcommand arguments.
            if (( ${#BASH_ARGV[@]}>2 )); then
                yarra
                declare -i ix=${#yarra[@]}-1
                if [ ${yarra[$ix]:0:1} == '/' ]; then
                    sh=${yarra[$ix]}
                    ix=$ix-1
                fi

                if (( $ix>2 )); then
                    pg=${yarra[3]}

                    if (( $ix>3 )); then
                        sg=${yarra[@]:4:$ix-3}
                    fi
                fi
            fi

            # Retrieve the primary group ID number (required for uvicEduHEPPrimarygidNumber).
            pgid=`ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b "cn=$pg,ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca" | awk '/^gidNumber: / {print $2}'`

            # Add a user to physics; set their login shell and primary group.
            echo -e "dn: uid=$2,ou=people,dc=uvic,dc=ca\nchangetype: modify\nadd: objectClass\nobjectClass: uvicEduHEP\n-\nadd: uvicEduHEPloginShell\nuvicEduHEPloginShell: $sh\n-\nadd: uvicEduHEPPrimarygidNumber\nuvicEduHEPPrimarygidNumber: $pgid\n-" >/tmp/sysldap_user_add.ldif
            ldapmodify -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -a -f /tmp/sysldap_user_add.ldif


            # Add user as a member to the primary group and any specified secondary groups
            for group in $pg $sg; do
                echo -e "dn: cn=$group,ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca\nchangetype: modify\nadd: member\nmember: uid=$2,ou=people,dc=uvic,dc=ca\n-" >/tmp/sysldap_user_add.ldif
                ldapmodify -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -a -f /tmp/sysldap_user_add.ldif
            done

            rm -f /tmp/sysldap_user_add.ldif
        ;;

######### Delete a user from physics.
        user_delete|ud|delete_user|du)
            if [ "X$2" == 'X' ]; then
                echo -e "\nSynopsis: [ user_delete | ud ] <NetlinkID>\n"
                exit
            fi

            source sysldap set_environment print_note

            # Remove any group memberships.
            groups=`ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b 'ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca'  "(member=uid=$2,ou=people,dc=uvic,dc=ca)" | awk '/^cn: / {print $2}'`
            for group in $groups; do
                echo -e "dn: cn=$group,ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca\nchangeType: modify\ndelete: member\nmember: uid=$2,ou=people,dc=uvic,dc=ca\n-" > /tmp/sysldap_user_delete.ldif
                ldapmodify -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -f /tmp/sysldap_user_delete.ldif
            done

            # Retrive basic user information.
            ui=`ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b 'ou=people,dc=uvic,dc=ca'  "(uid=$2)" | sort | awk '/^uvicEduHEPloginShell:|^uvicEduHEPPrimarygidNumber:/'`
            ui_a=($ui)

            # Remove uvicEduHEP objectClass and attributes.
            echo -e "dn: uid=$2,ou=people,dc=uvic,dc=ca\nchangetype: modify\ndelete: objectClass\nobjectClass: uvicEduHEP\n-" >/tmp/sysldap_user_delete.ldif

            for (( i=0; $i<${#ui_a[@]}; i+=$i+2 )); do
                echo -e "delete: ${ui_a[$i]::-1}\n${ui_a[$i]} ${ui_a[$i+1]}\n-" >>/tmp/sysldap_user_delete.ldif
            done

            ldapmodify -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -f /tmp/sysldap_user_delete.ldif

#           rm -f /tmp/sysldap_user_delete.ldif
        ;;

######### List physics users.
        user_list|ul|list_users|lu)
            source sysldap set_environment print_note

            ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b 'ou=people,dc=uvic,dc=ca' objectClass=uvicEduHEP | awk '/^uid: / {print $2}'
        ;;

######### Reset default shell (bash), primary and secondary groups.
        user_modify|um|modify_user|mu)
            if [ "X$2" == 'X' ]; then
                echo -e "\nSynopsis: sysldap [ user_modify | um ]  <NetlinkID> {group1} {<group2} ... {groupN} {shell}\n"
                echo "Subcommand default: primary group='hep', no secondary groups, and shell='/bin/shells/bash'."
                exit
            fi

            source sysldap set_environment print_note

            sysldap user_delete $2

            yarra
            sysldap user_add ${yarra[@]:2}
        ;;

######### Show physics user details.
        user_show|us|show_users|su)
            source sysldap set_environment print_note

            if [ "X$2" == 'X' ]; then 
                echo -e "\nSynopsis: sysldap [ user_show | us ]  <on_or_more_user_IDs>\n"
                exit
            fi

            for user in $2; do
                # Retrive basic user information.
                ui=`ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b 'ou=people,dc=uvic,dc=ca'  "(uid=$user)" | sort | awk '/^uvicEduHEPloginShell:|^uvicEduHEPPrimarygidNumber:/'`
                ui_a=($ui)

                # Test to see if user's ldap entry contains object class uvicEduHEP.
                if (( ${#ui_a[@]} < 4 )); then
                    if (( ${#ui_a[@]} < 2 )); then
                        ma='uvicEduHEPloginShell and uvicEduHEPPrimarygidNumber attributes'
                    else
                        if [ ${ui_a[0]} == 'uvicEduHEPPrimarygidNumber:' ]; then
                            ma='uvicEduHEPloginShell attribute'
                        else
                            ma='uvicEduHEPPrimarygidNumber attribute'
                        fi
                    fi
                    echo $user "*** $ma missing ***"
                    continue
                fi

                # Retrieve user's primary group name.
                pg=`ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b 'ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca'  "(gidNumber=${ui_a[3]})" | awk '/^cn: / {print $2}'`

                # Retrieve user's secondary groups (if any).
                sg=`ldapsearch -H $sysldap_uri -D "uid=$SUDO_USER,ou=people,dc=uvic,dc=ca" -w $sysldap_pw -x -b 'ou=hep,ou=phys,ou=groups,dc=uvic,dc=ca'  "(&(member=uid=$user,ou=people,dc=uvic,dc=ca)(!(gidNumber=${ui_a[3]})))" | awk '/^cn: / {print $2}'`

                # Print results.
                echo $user $pg $sg ${ui_a[1]}
            done
        ;;

######### Didn't recognize that subcommand.
        *)
            echo -e "sysldap subcommand omitted or invalid.\n"
            echo -e "\nSynopsis: sysldap <subcommand> {options}\n"
            echo -e "\nNotation:"
            echo -e "    <> Mandatory subcommand or argument."
            echo -e "    {} Oprional argument."
            echo -e "    [ choice1 | choice2 | choiceN ] Choose one."
            echo -e "\nSubcommands:"
            echo -e "    [ password_set | ps ]"
            echo -e "    [ group_add | ga ]"
            echo -e "    [ group_delete | gd ]"
            echo -e "    [ group_list | gl ]"
            echo -e "    [ group_modify | gm ]"
            echo -e "    [ user_add | ua ]"
            echo -e "    [ user_delete | ud ]"
            echo -e "    [ user_list | ul ]"
            echo -e "    [ user_modify | um ]"
            echo -e "    [ user_show | us ]"
            echo -e "\nNote: Issuing a subcommand without mandatory arguments will print additional help."
        ;;

    esac
