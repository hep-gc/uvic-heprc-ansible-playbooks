---
# file: roles/osctl/tasks/letsencrypt.yaml
#
# Note: Set the variable "letsencrypt_test: true" to use the letsencrypt test
# server. This variable is referenced by the handler "run get_letsencrypt_cert".

- set_fact:
    homedir: "{{ lookup('ansible.builtin.env', 'HOME') }}"
  when:
    ansible_version.major >= 3

- set_fact:
    homedir: "{{ lookup('env','HOME') }}"
  when:
    ansible_version.major < 3

- name: set_fact letsencrypt_archive if undefined
  set_fact:
    letsencrypt_archive: "{{ homedir }}/archive/letsencrypt"
  when:
    letsencrypt_archive is undefined

- name: set_fact letsencrypt_test
  set_fact:
    letsencrypt_test: false
  when:
    letsencrypt_test is undefined

- name: get initial python3 status
  stat:
    path: /usr/bin/python3
  register: initial_python3_status

- name: stat letsencrypt opt dir
  stat:
    path: /opt/letsencrypt
  register: initial_optdir_status

- name: stat certbot dir
  stat:
    path: /opt/letsencrypt/bin/certbot
  register: initial_certbot_status

- name: stat letsencrypt status
  stat:
    path: /etc/letsencrypt
  register: initial_letsencrypt_status

- name: stat letsencrypt archive status
  stat:
    path: "{{ letsencrypt_archive }}/{{ i_service_connection.0.ipv4fqdn }}.tar.gz"
  register: archive_status
  delegate_to: 127.0.0.1

- name: update the TLS root certificates
  command: update-ca-trust
  when: initial_letsencrypt_status.stat.exists == False

- name: install python2 virtualenv command
  pip:
    name: ["virtualenv"]
  when: initial_python3_status.stat.exists == False

- name: create python2 virtual environment for letsencrypt
  command: virtualenv /opt/letsencrypt
  when:
  - initial_python3_status.stat.exists == False
  - initial_optdir_status.stat.exists == False

- name: install certbot into the python2 virtual environment
  command: /opt/letsencrypt/bin/pip install certbot
  when:
  - initial_python3_status.stat.exists == False
  - initial_certbot_status.stat.exists == False

- name: create python3 virtual environment for letsencrypt
  command: python3 -m venv /opt/letsencrypt
  when:
  - initial_python3_status.stat.exists == True
  - initial_optdir_status.stat.exists == False

- name: upgrade pip3 to latest version before install certbot
  command: /opt/letsencrypt/bin/pip3 install --upgrade pip
  when:
  - initial_python3_status.stat.exists == True
  - initial_certbot_status.stat.exists == False

- name: install non-broken ssl version for certbot
  command: /opt/letsencrypt/bin/pip3 install pyOpenSSL==23.1.1
  when:
  - initial_python3_status.stat.exists == True
  - initial_certbot_status.stat.exists == False

- name: install certbot into the python3 virtual environment
  command: /opt/letsencrypt/bin/pip3 install certbot
  when:
  - initial_python3_status.stat.exists == True
  - initial_certbot_status.stat.exists == False

- name: ensure the letsencrypt management directory exists
  file:
    dest: /etc/letsencrypt
    state: directory
    owner: root
    group: root
    mode: 0755
  when: 
  - initial_letsencrypt_status.stat.exists == False
  #- archive_status.stat.exists == False

- name: install the virtual hosts configuration file
  template:
    src: etc_letsencrypt_VirtualHosts.j2
    dest: /etc/letsencrypt/VirtualHosts
    owner: root
    group: root
    mode: 0644

- name: install custom command to retrieve letsencrypt certificates
  template:
    src: usr_local_sbin_get_letsencrypt_cert.j2
    dest: /usr/local/sbin/get_letsencrypt_cert
    owner: root
    group: root
    mode: 0700

- name: install the current SSL tar file
  unarchive:
    src: "{{ letsencrypt_archive }}/{{ i_service_connection.0.ipv4fqdn }}.tar.gz"
    dest: /etc/
  when: 
  - initial_letsencrypt_status.stat.exists == False
  - archive_status.stat.exists == True

- name: set hostname to FQDN of machine
  ansible.builtin.hostname:
    name: "{{ i_service_connection.0.ipv4fqdn }}"
  when: csv2_ci_openstack == True

- name: run /usr/local/sbin/get_letsencrypt_cert
  shell: /usr/local/sbin/get_letsencrypt_cert


- name: install cron task for letsencrypt
  copy:
    src: etc_cron.d_get_letsencrypt_cert
    dest: /etc/cron.d/get_letsencrypt_cert
    owner: root
    group: root
    mode: 0644


- name: create certificates directory
  file:
    dest: /etc/grid-security/certificates
    state: directory
    owner: root
    group: root
    mode: 0755

- name: install letsencrypt certificte chain
  shell: |
    git clone https://github.com/cilogon/letsencrypt-certificates.git
    cd letsencrypt-certificates/
    make check
    sudo make install
  args:
    executable: /bin/bash

- name: meta
  meta: flush_handlers

- name: archive SSL certificates
  fetch:
    src: /var/log/letsencrypt/{{ i_service_connection.0.ipv4fqdn }}.tar.gz
    dest: "{{ letsencrypt_archive }}/{{ i_service_connection.0.ipv4fqdn }}.tar.gz"
    flat: yes
