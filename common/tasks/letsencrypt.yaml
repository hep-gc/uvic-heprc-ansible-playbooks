---
# file: common/tasks/letsencrypt.yaml
#
# Note: Set the variable "letsencrypt_test: true" to use the letsencrypt test
# server. This variable is referenced by the handler "run get_letsencrypt_cert".

- name: set_fact letsencrypt_test
  set_fact:
    letsencrypt_test: false 
  when:
    letsencrypt_test is undefined

- name: stat letsencrypt status
  stat:
    path: /etc/letsencrypt
  register: initial_letsencrypt_status

- name: stat letsencrypt archive status
  stat:
    path: "/mnt/hosts/{{i_service_connection.0.ipv4fqdn }}/letsencrypt/{{ i_service_connection.0.ipv4fqdn }}.tar.gz"
  register: archive_status

- name: set timezone
  community.general.timezone:
    name: "{{ timezone }}"
  when: timezone is defined

- name: update the TLS root certificates
  command: update-ca-trust
  when: initial_letsencrypt_status.stat.exists == False

- name: ensure the letsencrypt management directory exists
  file:
    dest: /etc/letsencrypt
    state: directory
    owner: root
    group: root
    mode: "0755"
  when:
    - not initial_letsencrypt_status.stat.exists
    - not archive_status.stat.exists

- name: Install the current SSL tar file
  ansible.builtin.unarchive:
    src: "/mnt/hosts/{{ i_service_connection.0.ipv4fqdn }}/letsencrypt/{{ i_service_connection.0.ipv4fqdn }}.tar.gz"
    dest: /etc/
    remote_src: true
  when:
    - not initial_letsencrypt_status.stat.exists
    - archive_status.stat.exists

- name: Set hostname to FQDN of machine
  ansible.builtin.hostname:
    name: "{{ i_service_connection.0.ipv4fqdn }}"

# --- certbot install ---
- name: Install snapd for certbot
  ansible.builtin.dnf:
    name: snapd
    state: present

- name: Enable snapd socket
  ansible.builtin.systemd_service:
    name: snapd.socket
    enabled: true

- name: Enable classic snap
  ansible.builtin.file:
    src: /var/lib/snapd/snap
    dest: /snap
    state: link

- name: Ensure snapd socket started
  ansible.builtin.systemd_service:
    name: snapd.socket
    state: started

- name: Restart snapd service
  ansible.builtin.systemd_service:
    name: snapd.service
    state: restarted

- name: Restart snapd seeded service
  ansible.builtin.systemd_service:
    name: snapd.seeded.service
    state: restarted

- name: Install certbot
  community.general.snap:
    classic: true
    name: certbot
    state: present

- name: Prepare certbot command
  ansible.builtin.file:
    src: /snap/bin/certbot
    dest: /usr/bin/certbot
    state: link
# --- end certbot install ---

- name: Register if each virtual_host certificate store exists
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ item.virtualhost }}"
  loop: "{{ i_virtualhosts }}"
  register: i_virtualhosts_certificates_store

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Stop httpd service if present
  ansible.builtin.systemd_service:
    name: httpd.service
    state: stopped
  when: "'httpd' in services"

- name: Stop HAProxy service if present
  ansible.builtin.systemd_service:
    name: HAProxy.service
    state: stopped
  when: "'HAProxy' in services"

# get firewall status (save if http,https disabled)
- name: Retrieve firewall-cmd stat
  ansible.builtin.stat:
    path: /usr/bin/firewall-cmd
  register: firewall_present

- name: Set firewall_exists to true if firewall-cmd is present
  ansible.builtin.set_fact:
    firewall_present: "{{ firewall_present.stat.exists }}"

- name: Get firewall status
  ansible.posix.firewalld_info:
    zones: public
  register: firewall_status
  when: firewall_present

- name: Register if http service disabled in firewalld
  ansible.builtin.set_fact:
    http_disabled: true
  when:
    - firewall_present
    - "'http' not in firewall_status.firewalld_info.zones.public.services"
    - http_disabled is undefined

- name: Register if https service disabled in firewalld
  ansible.builtin.set_fact:
    https_disabled: true
  when:
    - firewall_present
    - "'https' not in firewall_status.firewalld_info.zones.public.services"
    - https_disabled is undefined

- name: Enable http in firewalld
  ansible.posix.firewalld:
    service: http
    zone: public
    state: enabled
  when: firewall_present

- name: Enable https in firewalld
  ansible.posix.firewalld:
    service: https
    zone: public
    state: enabled
  when: firewall_present

- name: Set up new certificates for virtualhosts
  ansible.builtin.command: certbot -n --standalone -d {{ item.item.virtualhost }} --agree-tos --email {{ admin_email }} certonly
  loop: "{{ i_virtualhosts_certificates_store.results }}"
  when: not item.stat.exists
  changed_when: not item.stat.exists

- name: Certbot renew certificates
  ansible.builtin.command: certbot -n renew
  register: out
  changed_when: out is not search("No renewals were attempted")

- name: Show certbot renewal
  ansible.builtin.debug:
    msg: "{{ out.stdout }}"

- name: Disable http in firewalld if previously disabled
  ansible.posix.firewalld:
    service: http
    zone: public
    state: disabled
  when:
    - firewall_present
    - http_disabled is defined
    - http_disabled

- name: Disable https in firewalld if previously disabled
  ansible.posix.firewalld:
    service: https
    zone: public
    state: disabled
  when:
    - firewall_present
    - https_disabled is defined
    - https_disabled

- name: Start httpd service if present
  ansible.builtin.systemd_service:
    name: httpd.service
    state: started
  when: "'httpd' in services"

- name: Start HAProxy service if present
  ansible.builtin.systemd_service:
    name: HAProxy.service
    state: started
  when: "'HAProxy' in services"

- name: create certificates directory
  file:
    dest: /etc/grid-security/certificates
    state: directory
    owner: root
    group: root
    mode: 0755

- name: install letsencrypt certificte chain
  shell: |
    git clone https://github.com/cilogon/letsencrypt-certificates.git
    cd letsencrypt-certificates/
    make check
    sudo make install
  args:
    executable: /bin/bash

- name: meta
  meta: flush_handlers

# Archive current letsencrypt certs to backup dir
- name: Ensure letsencrypt backup directory exists
  ansible.builtin.file:
    path: /mnt/hosts/{{ i_service_connection.0.ipv4fqdn }}/letsencrypt
    state: directory
    owner: root
    group: root
    mode: "600"

- name: Create letsencrypt archive
  community.general.archive:
    path: /etc/letsencrypt
    dest: /mnt/hosts/{{ i_service_connection.0.ipv4fqdn }}/letsencrypt/{{ i_service_connection.0.ipv4fqdn }}.tar.gz
    force_archive: true
    owner: root
    group: root
    mode: "0600"

...
