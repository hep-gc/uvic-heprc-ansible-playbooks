---
# file: configure_network.yaml - inventory variables provide network configuration.

- name: Install epel repo
  dnf:
    name: ['epel-release']
    state: latest
  when: ansible_facts['distribution_major_version'] == "8"

- name: update certificate trust
  command: /usr/bin/update-ca-trust

- name: install packages required for network configuration
  yum:
    name: ['bridge-utils']
    state: latest

- name: save the original ifdown command
  command: mv /usr/sbin/ifdown /usr/sbin/ifdown-original creates=/usr/sbin/ifdown-original

- name: wrap the original ifdown command temp fix for network script corruption
  copy:
   src: usr_sbin_ifdown
   dest: /usr/sbin/ifdown
   owner: root
   group: root
   mode: 0755

- name: Disable Network Manager for permanent firewall changes
  systemd: name=NetworkManager enabled=no state=stopped
  when: ansible_facts['distribution_major_version'] == "8"

- name: open internal tcp network ports
  firewalld: zone=internal port=0-65535/tcp  state=enabled immediate=true permanent=true
  notify:
    - restart firewalld
  ignore_errors: yes

- name: open internal udp network ports
  firewalld: zone=internal port=0-65535/udp  state=enabled immediate=true permanent=true
  notify:
    - restart firewalld
  ignore_errors: yes

- name: remove interfaces from internal zone
  firewalld: zone=internal interface={{ item.int }} state=disabled immediate=true permanent=true
  with_items: "{{ i_fw_zone_interfaces }}"
  when: 
    - item.ext == 'y'
  notify:
    - restart firewalld
  ignore_errors: yes

- name: remove interfaces from public zone
  firewalld: zone=internal interface={{ item.int }} state=disabled immediate=true permanent=true
  with_items: "{{ i_fw_zone_interfaces }}"
  when: 
    - item.ext != 'y'
  notify:
    - restart firewalld
  ignore_errors: yes

- name: assign interfaces to internal zone
  firewalld: zone=internal interface={{ item.int }} state=enabled immediate=true permanent=true
  with_items: "{{ i_fw_zone_interfaces }}"
  when: 
    - item.ext != 'y'
  notify:
    - restart firewalld
  ignore_errors: yes

- name: assign interfaces to public zone
  firewalld: zone=public interface={{ item.int }} state=enabled immediate=true permanent=true
  with_items: "{{ i_fw_zone_interfaces }}"
  when: 
    - item.ext == 'y'
  notify:
    - restart firewalld
  ignore_errors: yes

- name: apply firewall rich rules
  firewalld:
    zone: "{{ item.zone }}"
    rich_rule: "{{ item.rule }}"
    state: enabled
    immediate: yes
    permanent: yes
  with_items: "{{ i_fw_rich_rules }}"
  notify:
    - restart firewalld
  ignore_errors: yes

- name: meta
  meta: flush_handlers

- name: list networking scripts for ethX interfaces
  shell:
    cmd: ls /etc/sysconfig/network-scripts/* | grep ifcfg-eth || rc=0
  register: eth_scripts

- name: remove ethX networking scripts
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ eth_scripts.stdout_lines }}"

- name: install customized networking scripts for bridges
  template: src=etc_sysconfig_network-scripts_ifcfg-BRIDGE.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.bridge }} owner=root group=root mode=0644
  with_items: "{{ i_connections }}"
  when: item.bridge != "-"
  notify:
    - restart network

- name: install customized networking scripts for NICS
  template: src=etc_sysconfig_network-scripts_ifcfg-NIC.j2 dest=/etc/sysconfig/network-scripts/ifcfg-{{ item.nic }} owner=root group=root mode=0644
  with_items: "{{ i_connections }}"
  notify:
    - restart network

- name: Make sure networks start on reboot without NetworkManager (Centos8)
  lineinfile:
    path: /etc/rc.d/rc.local
    mode: 0755
    line: /usr/sbin/ifup {{ item.nic }}
  with_items: "{{ i_connections }}"
  when: ansible_facts['distribution_major_version'] == "8"

#- name: Run network handler
#  command: /bin/true
#  notify:
#    - restart network

- name: meta
  meta: flush_handlers
